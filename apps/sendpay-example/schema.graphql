"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""A bigint."""
scalar BigInt

enum Chain {
  Mainnet
  Base
  BaseSepolia
}

union ConsumeSessionResult = ConsumeSessionResultError | ConsumeSessionResultOk

type ConsumeSessionResultError {
  name: String!
  reason: String
}

type ConsumeSessionResultOk {
  about: String
  address: String!
  avatar_url: String
  chainId: Int
  refcode: String
  sendId: Float!
  sendtag: String
}

input MakeSessionInput {
  bySendId: MakeSessionInputBySendId
  byTag: MakeSessionInputByTag
}

input MakeSessionInputBySendId {
  """The chain id to use for the session"""
  chain: Chain

  """The ethereum address to receive the confirmation tx"""
  confirmationAddress: String!

  """The amount of tokens to send to the confirmation address"""
  confirmationAmount: BigInt

  """Duration of the session in milliseconds"""
  duration: Float

  """The sendid to request a session for"""
  sendid: Float!
}

input MakeSessionInputByTag {
  """The chain id to use for the session"""
  chain: Chain

  """The ethereum address to receive the confirmation tx"""
  confirmationAddress: String!

  """The amount of tokens to send to the confirmation address"""
  confirmationAmount: BigInt

  """Duration of the session in milliseconds"""
  duration: Float

  """The sendtag to request a session for"""
  tag: String!
}

union MakeSessionResult = MakeSessionResultError | MakeSessionResultOk

type MakeSessionResultError {
  name: String!
  reason: String!
}

type MakeSessionResultOk {
  id: String!
}

type Mutation {
  consumeSendpaySession: ConsumeSessionResult!
  makeSendpaySession(input: MakeSessionInput!): MakeSessionResult!

  """Add a new Todo item."""
  todoAdd(input: TodoAddInput!): TodoAddResult!

  """Delete a todo."""
  todoDelete(todoId: ID!): TodoDeleteResult!

  """Update a todo."""
  todoUpdate(input: TodoUpdateInput!): TodoUpdateResult!
}

"""An object with an ID."""
interface Node {
  id: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Query {
  """The current time on the server, as a timestamp."""
  currentTime: Float

  """List todos."""
  listTodos(after: String, before: String, completed: Boolean, filterText: String, first: Int, last: Int): TodoConnection

  """The currently logged in user."""
  me: User!

  """Fetches an object given its ID."""
  node(id: ID!): Node

  """Fetches objects given their IDs."""
  nodes(ids: [ID!]!): [Node]!
}

"""A single todo item."""
type Todo implements Node {
  """Whether the todo is completed or not."""
  completed: Boolean!
  id: String!

  """The text of the todo item."""
  text: String!
}

input TodoAddInput {
  completed: Boolean!
  text: String!
}

union TodoAddResult = TodoAddResultError | TodoAddResultOk

type TodoAddResultError {
  reason: String!
}

type TodoAddResultOk {
  addedTodo: Todo!
}

"""A connection to a todo."""
type TodoConnection {
  """A list of edges."""
  edges: [TodoEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

union TodoDeleteResult = TodoDeleteResultError | TodoDeleteResultOk

type TodoDeleteResultError {
  reason: String!
}

type TodoDeleteResultOk {
  deletedTodoId: ID!
}

"""An edge to a todo."""
type TodoEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Todo
}

"""Input for updating a todo."""
input TodoUpdateInput {
  """Whether the todo is completed or not."""
  completed: Boolean

  """What text the todo has."""
  text: String

  """The id of the todo to update."""
  todoId: ID!
}

union TodoUpdateResult = TodoUpdateResultError | TodoUpdateResultOk

type TodoUpdateResultError {
  """What went wrong updating the todo."""
  message: String!
}

type TodoUpdateResultOk {
  """The todo that was updated."""
  updatedTodo: Todo!
}

type User implements Node {
  id: String!
  name: String!
}

