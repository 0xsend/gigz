
"""A bigint."""
scalar BigInt

enum Chain {
  Mainnet
  Base
  BaseSepolia
}

enum ChainId {
  Mainnet
  Base
  BaseSepolia
}

enum LookupType {
  tag
  sendid
}

union Result = 
  | ResultOk
  | ResultError


union TodoAddResult = 
  | TodoAddResultOk
  | TodoAddResultError


union TodoDeleteResult = 
  | TodoDeleteResultOk
  | TodoDeleteResultError


union TodoUpdateResult = 
  | TodoUpdateResultOk
  | TodoUpdateResultError


union VerifySessionResult = 
  | VerifySessionResultOk
  | VerifySessionResultError



"""Request to open a sendpay session"""
input Input {

  """The identifier to request a session for"""
  identifier: String!

  """The type of identifier"""
  lookupType: LookupType!

  """The ethereum address to receive the confirmation tx"""
  confirmationAddress: String!

  """The chain id to use for the session"""
  chainId: ChainId
}

input TodoAddInput {
  text: String!
  completed: Boolean!
}


"""Input for updating a todo."""
input TodoUpdateInput {

  """The id of the todo to update."""
  todoId: ID!

  """Whether the todo is completed or not."""
  completed: Boolean

  """What text the todo has."""
  text: String
}


"""An object with an ID."""
interface Node {

  """The id of the object."""
  id: ID!
}

type ResultError {
  name: String!
  reason: String!
}

type ResultOk {
  sessionId: String!
  identifier: String!
  lookupType: LookupType!
}

type TodoAddResultError {
  reason: String!
}

type TodoAddResultOk {
  addedTodo: Todo!
}

type TodoDeleteResultError {
  reason: String!
}

type TodoDeleteResultOk {
  deletedTodoId: ID!
}

type TodoUpdateResultError {

  """What went wrong updating the todo."""
  message: String!
}

type TodoUpdateResultOk {

  """The todo that was updated."""
  updatedTodo: Todo!
}

type VerifySessionResultError {
  name: String!
  reason: String!
}

type VerifySessionResultOk {
  sendId: String!
  address: String!
  sendtags: [String!]
  chainId: Int!
}

type Mutation {

  """Add a new Todo item."""
  todoAdd(input: TodoAddInput!): TodoAddResult!

  """Delete a todo."""
  todoDelete(todoId: ID!): TodoDeleteResult!

  """Update a todo."""
  todoUpdate(input: TodoUpdateInput!): TodoUpdateResult!
  makeSendpaySession(input: Input!): Result!
}


"""Information about pagination in a connection."""
type PageInfo {

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {

  """The currently logged in user."""
  me: User!

  """List todos."""
  listTodos(filterText: String, completed: Boolean, first: Int, after: String, before: String, last: Int): TodoConnection

  """The current time on the server, as a timestamp."""
  currentTime: Float

  """Fetches objects given their IDs."""
  nodes(ids: [ID!]!): [Node]!

  """Fetches an object given its ID."""
  node(id: ID!): Node
}


"""A single todo item."""
type Todo implements Node {

  """The text of the todo item."""
  text: String!

  """Whether the todo is completed or not."""
  completed: Boolean!

  """The id of the object."""
  id: ID!
}


"""A connection to a todo."""
type TodoConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]
}


"""An edge to a todo."""
type TodoEdge {

  """The item at the end of the edge."""
  node: Todo

  """A cursor for use in pagination."""
  cursor: String!
}

type User implements Node {
  name: String!

  """The id of the object."""
  id: ID!
}

