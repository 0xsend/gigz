// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__List from "@rescript/core/src/Core__List.mjs";
import * as DataLoader from "resgraph/src/res/DataLoader.mjs";
import * as Interface_node from "./__generated__/interface_node.mjs";
import * as ResGraph__Utils from "resgraph/src/res/ResGraph__Utils.mjs";

var typeMap = {
  Todo: 2,
  User: 1
};

var nodeTypeMap = Interface_node.TypeMap.make(typeMap, (function (v) {
        return v.toString();
      }));

function decodeNodeInterfaceId(id) {
  var match = Core__List.fromArray(ResGraph__Utils.Base64.decode(id).split(":"));
  if (!match) {
    return ;
  }
  var match$1 = match.tl;
  if (!match$1) {
    return ;
  }
  var typ = Interface_node.TypeMap.getTypeByStringifiedValue(nodeTypeMap, match.hd);
  if (typ !== undefined) {
    return [
            typ,
            match$1.hd,
            Core__List.toArray(match$1.tl)
          ];
  }
  
}

function dbIdForType(id, typ) {
  var match = decodeNodeInterfaceId(id);
  if (match !== undefined && match[0] === typ) {
    return match[1];
  }
  
}

function nodeInterfaceIdToString(typename, id, extraOpt) {
  var extra = extraOpt !== undefined ? extraOpt : [];
  var value = Interface_node.TypeMap.getStringifiedValueByType(nodeTypeMap, typename);
  var nodeId = [
        value,
        id
      ].concat(extra).join(":");
  return ResGraph__Utils.Base64.encode(nodeId);
}

async function node(param, id, ctx) {
  var match = decodeNodeInterfaceId(id);
  if (match === undefined) {
    return ;
  }
  var id$1 = match[1];
  if (match[0] === "Todo") {
    var todo = await DataLoader.load(ctx.dataLoaders.todo.byId, id$1);
    if (todo !== undefined) {
      return {
              TAG: "Todo",
              _0: todo
            };
    } else {
      return ;
    }
  }
  var user = await DataLoader.load(ctx.dataLoaders.user.byId, id$1);
  if (user !== undefined) {
    return {
            TAG: "User",
            _0: user
          };
  }
  
}

function nodes(query, ids, ctx) {
  return ids.map(function (id) {
              return node(query, id, ctx);
            });
}

function id(node, typename) {
  return nodeInterfaceIdToString(typename, node.id, undefined);
}

export {
  typeMap ,
  nodeTypeMap ,
  decodeNodeInterfaceId ,
  dbIdForType ,
  nodeInterfaceIdToString ,
  node ,
  nodes ,
  id ,
}
/* nodeTypeMap Not a pure module */
