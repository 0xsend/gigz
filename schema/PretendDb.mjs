// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.mjs";

var todosIdSequence = {
  contents: 3
};

var todos = [
  {
    id: "1",
    text: "Make the wise decision to start using Gigz",
    completed: true
  },
  {
    id: "2",
    text: "Ship Gigz to production",
    completed: false
  }
];

var users = [{
    id: "1",
    name: "Test User"
  }];

async function findSingleUser(userId) {
  return users.find(function (user) {
              return user.id === userId;
            });
}

async function findSingleTodo(todoId) {
  return todos.find(function (t) {
              return t.id === todoId;
            });
}

async function findManyTodos(todoIds) {
  return await Promise.all(todoIds.map(function (todoId) {
                  return findSingleTodo(todoId);
                }));
}

async function findTodos(filterText, filterCompleted) {
  return todos.filter(function (todo) {
              if (filterText !== undefined) {
                if (filterCompleted !== undefined && todo.completed !== filterCompleted) {
                  return false;
                } else {
                  return todo.text.startsWith(filterText);
                }
              } else if (filterCompleted !== undefined) {
                return todo.completed === filterCompleted;
              } else {
                return true;
              }
            });
}

async function addTodo(text, completed) {
  var id = todosIdSequence.contents.toString();
  todosIdSequence.contents = todosIdSequence.contents + 1 | 0;
  var newTodo = {
    id: id,
    text: text,
    completed: completed
  };
  todos.push(newTodo);
  return {
          TAG: "Ok",
          _0: newTodo
        };
}

async function updateTodo(todoId, updater) {
  var idx = Core__Array.findIndexOpt(todos, (function (t) {
          return t.id === todoId;
        }));
  if (idx === undefined) {
    return {
            TAG: "Error",
            _0: "Todo not found."
          };
  }
  var todo = todos[idx];
  var newTodo = updater(todo);
  todos[idx] = newTodo;
  return {
          TAG: "Ok",
          _0: newTodo
        };
}

async function deleteTodo(todoId) {
  var idx = Core__Array.findIndexOpt(todos, (function (t) {
          return t.id === todoId;
        }));
  if (idx !== undefined) {
    todos.splice(idx, 1);
    return {
            TAG: "Ok",
            _0: todoId
          };
  } else {
    return {
            TAG: "Error",
            _0: "Todo not found."
          };
  }
}

export {
  findSingleUser ,
  findSingleTodo ,
  findManyTodos ,
  findTodos ,
  addTodo ,
  updateTodo ,
  deleteTodo ,
}
/* No side effect */
