
"""A bigint."""
scalar BigInt

enum Chain {
  Mainnet
  Base
  BaseSepolia
}

enum ListingType {
  Gig
  Offer
}

enum LookupType {
  tag
  sendid
}

enum Token {
  USDC
  ETH
  SEND
}

union ConsumeSessionResult = 
  | ConsumeSessionResultOk
  | ConsumeSessionResultError


union MakeListingResult = 
  | MakeListingResultOk
  | MakeListingResultError


union MakeSessionResult = 
  | MakeSessionResultOk
  | MakeSessionResultError


union TodoAddResult = 
  | TodoAddResultOk
  | TodoAddResultError


union TodoDeleteResult = 
  | TodoDeleteResultOk
  | TodoDeleteResultError


union TodoUpdateResult = 
  | TodoUpdateResultOk
  | TodoUpdateResultError


input MakeSessionInputBySendId {

  """The sendid to request a session for"""
  sendid: Float!

  """The ethereum address to receive the confirmation tx"""
  confirmationAddress: String!

  """The amount of tokens to send to the confirmation address"""
  confirmationAmount: BigInt

  """The chain id to use for the session"""
  chain: Chain

  """Duration of the session in milliseconds"""
  duration: Float
}

input MakeSessionInputByTag {

  """The sendtag to request a session for"""
  tag: String!

  """The ethereum address to receive the confirmation tx"""
  confirmationAddress: String!

  """The amount of tokens to send to the confirmation address"""
  confirmationAmount: BigInt

  """The chain id to use for the session"""
  chain: Chain

  """Duration of the session in milliseconds"""
  duration: Float
}

input MakeListing {

  """The sendid to request a session for"""
  sendid: Float!

  """The title of the listing"""
  title: String!

  """The description of the listing"""
  description: String

  """The chain id to use for the session"""
  imageLinks: [String!]

  """The payment pills for the listing"""
  pills: PillsInput!

  """The tags for the listing"""
  skills: [TagInput!]
}

input PillsInput {
  usdc: BigInt!
  eth: BigInt!
  send: BigInt!
}

input TagInput {
  name: String!
}

input TodoAddInput {
  text: String!
  completed: Boolean!
}


"""Input for updating a todo."""
input TodoUpdateInput {

  """The id of the todo to update."""
  todoId: ID!

  """Whether the todo is completed or not."""
  completed: Boolean

  """What text the todo has."""
  text: String
}

input MakeListingByType @oneOf {
  offer: MakeListing
  gig: MakeListing
}

input MakeSessionInput @oneOf {
  bySendId: MakeSessionInputBySendId
  byTag: MakeSessionInputByTag
}


"""An object with an ID."""
interface Node {

  """The id of the object."""
  id: ID!
}

type ConsumeSessionResultError {
  name: String!
  reason: String
}

type ConsumeSessionResultOk {
  sendId: Float!
  address: String!
  sendtag: String
  avatar_url: String
  about: String
  refcode: String
  chainId: Int
}

type MakeListingResultError {
  name: String!
  reason: String!
}

type MakeListingResultOk {
  newListing: Listing!
}

type MakeSessionResultError {
  name: String!
  reason: String!
}

type MakeSessionResultOk {
  id: String!
}

type TodoAddResultError {
  reason: String!
}

type TodoAddResultOk {
  addedTodo: Todo!
}

type TodoDeleteResultError {
  reason: String!
}

type TodoDeleteResultOk {
  deletedTodoId: ID!
}

type TodoUpdateResultError {

  """What went wrong updating the todo."""
  message: String!
}

type TodoUpdateResultOk {

  """The todo that was updated."""
  updatedTodo: Todo!
}


"""A single listing item."""
type Listing implements Node {
  title: String!
  description: String
  imageLinks: [String!]
  pills: Pills!
  skills: [Skill!]!
  createdAt: Float!

  """The id of the object."""
  id: ID!
}


"""A connection to a listing."""
type ListingConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ListingEdge]
}


"""An edge to a listing."""
type ListingEdge {

  """The item at the end of the edge."""
  node: Listing

  """A cursor for use in pagination."""
  cursor: String!
}

type Mutation {

  """Add a new Todo item."""
  todoAdd(input: TodoAddInput!): TodoAddResult!

  """Delete a todo."""
  todoDelete(todoId: ID!): TodoDeleteResult!

  """Update a todo."""
  todoUpdate(input: TodoUpdateInput!): TodoUpdateResult!
  consumeSendpaySession: ConsumeSessionResult!
  makeSendpaySession(input: MakeSessionInput!): MakeSessionResult!
  makeListing(input: MakeListingByType!): MakeListingResult!
}


"""Information about pagination in a connection."""
type PageInfo {

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pills {
  usdc: BigInt!
  eth: BigInt!
  send: BigInt!
}

type Query {

  """The currently logged in user."""
  me: User!

  """List todos."""
  listTodos(filterText: String, completed: Boolean, first: Int, after: String, before: String, last: Int): TodoConnection

  """The current time on the server, as a timestamp."""
  currentTime: Float

  """Fetches objects given their IDs."""
  nodes(ids: [ID!]!): [Node]!

  """Fetches an object given its ID."""
  node(id: ID!): Node

  """All gigs in chronological order"""
  gigs(first: Int, after: String): ListingConnection!

  """All offers in chronological order"""
  offers(first: Int, after: String): ListingConnection!

  """All listings in chronological order"""
  listings(first: Int, after: String): ListingConnection!
}

type Skill implements Node {
  name: String!

  """The id of the object."""
  id: ID!
}


"""A single todo item."""
type Todo implements Node {

  """The text of the todo item."""
  text: String!

  """Whether the todo is completed or not."""
  completed: Boolean!

  """The id of the object."""
  id: ID!
}


"""A connection to a todo."""
type TodoConnection {

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]
}


"""An edge to a todo."""
type TodoEdge {

  """The item at the end of the edge."""
  node: Todo

  """A cursor for use in pagination."""
  cursor: String!
}

type User implements Node {
  name: String!

  """The id of the object."""
  id: ID!
}

